import threading
import time


def thread_worker():
    def worker(thread_id, delay, iterations):
        for i in range(iterations):
            print(f"–ü–æ—Ç–æ–∫ {thread_id}: –ò—Ç–µ—Ä–∞—Ü–∏—è {i + 1} (–∑–∞–¥–µ—Ä–∂–∫–∞ {delay} —Å–µ–∫)")
            time.sleep(delay)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        print(f"–ü–æ—Ç–æ–∫ {thread_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")

    treads = [
        threading.Thread(target=worker, args=(1, 0.5, 5)),
        # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ–± –ø–æ—Ç–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∫ –∫–æ–Ω—Ü—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ –∫–æ–¥–∞
        threading.Thread(target=worker, args=(2, 0.3, 3)),  # —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä deamon = True
        threading.Thread(target=worker, args=(3, 0.1, 9)),
    ]

    # –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
    for t in treads:
        t.start()

    # –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for t in treads:
        t.join()

    print("\n–í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É")


def multiroc():  # –Ω–µ–ª—å–∑—è –≤–Ω–µ—Å—Ç–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Ç–∫ –Ω—É–∂–µ–Ω –º–µ–π–Ω –ø–æ—Ç–æ–∫ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (—è —Ö–∑ –ø–æ–∫–∞ –∫–∞–∫ –µ–≥–æ –≥—Ä–∞–º–æ—Ç–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç—É—Ç)
    import multiprocessing
    import time
    from random import randint

    def delayed_task(task_id, delay):
        """–§—É–Ω–∫—Ü–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, –∏–º–∏—Ç–∏—Ä—É—é—â–∞—è —Ä–∞–±–æ—Ç—É"""
        print(f"‚ñ∂ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–ø—É—â–µ–Ω–∞ (–∑–∞–¥–µ—Ä–∂–∫–∞ {delay} —Å–µ–∫)")
        time.sleep(delay)
        print(f"‚èπ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ {task_id}"

    def main_function():
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª –∏–∑ 3 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        with multiprocessing.Pool(3) as pool:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5 –∑–∞–¥–∞—á —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –æ—Ç 1 –¥–æ 3 —Å–µ–∫
            tasks = [(i, randint(1, 3)) for i in range(1, 6)]

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            results = [pool.apply_async(delayed_task, task) for task in tasks]

            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            output = [res.get() for res in results]

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n–í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for result in output:
            print(f"‚Ä¢ {result}")

    if __name__ == "__main__":
        print("üöÄ –°—Ç–∞—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        start_time = time.time()

        main_function()

        end_time = time.time()
        print(f"\nüïí –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫")


def async_ex():  # —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ –≤ –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–µ –Ω–µ–ª—å–∑—è –∑–∞–ø—É—Å–∫–∞—Ç—å –≤–Ω–µ –º–µ–π–Ω –ø–æ—Ç–æ–∫–∞ –∏ –≤–Ω—É—Ç—Ä–∏ –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    import asyncio
    from random import randint
    import time

    async def mock_api_request(task_id: int, delay: float) -> str:
        print(f"‚ñ∂ –ó–∞–¥–∞—á–∞ {task_id} –Ω–∞—á–∞–ª–∞—Å—å (–∑–∞–¥–µ—Ä–∂–∫–∞: {delay} —Å–µ–∫)")
        await asyncio.sleep(delay)
        print(f"‚úî –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return f"–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ {task_id}"

    async def main():
        tasks = [
            mock_api_request(1, 2.5),
            mock_api_request(2, 0.7),
            mock_api_request(3, 1.0)
        ]
        results = await asyncio.gather(*tasks)
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for result in results:
            print(f"‚Ä¢ {result}")

    if __name__ == "__main__":
        start_time = time.time()
        asyncio.run(main())
        end_time = time.time()
        print(f"\n–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫")
